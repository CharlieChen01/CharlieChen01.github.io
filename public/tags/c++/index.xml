<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; on 👨‍🌾 Charlie Chen</title>
    <link>http://localhost:1313/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 👨‍🌾 Charlie Chen</description>
    <generator>Hugo -- 0.124.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 May 2024 16:49:05 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Decode Mp4 Using C&#43;&#43; and Ffmepg</title>
      <link>http://localhost:1313/posts/media/how-to-decode-mp4-using-c&#43;&#43;-and-ffmepg/</link>
      <pubDate>Wed, 22 May 2024 16:49:05 +0800</pubDate>
      <guid>http://localhost:1313/posts/media/how-to-decode-mp4-using-c&#43;&#43;-and-ffmepg/</guid>
      <description>使用 FFmpeg 库来处理 MP4 编解码 初始化 FFmpeg 在你的 C++ 项目中，首先需要初始化 FFmpeg。你可以调用 av_register_all() 来注册 FFmpeg 所有的编解码器和格式。
打开输入文件 使用 avformat_open_input() 打开 MP4 文件，获取 AVFormatContext 结构体。这个结构体包含了文件的流信息、编解码器等。
查找视频流 遍历 AVFormatContext 中的流，找到视频流的索引。
获取视频解码器 使用视频流索引，获取视频流的解码器上下文 AVCodecContext。你可以使用 avcodec_find_decoder() 来查找合适的解码器。
打开解码器 使用 avcodec_open2() 打开解码器。
读取帧 使用 av_read_frame() 读取视频帧。每一帧都包含在 AVPacket 中。
解码帧 使用 avcodec_decode_video2() 解码视频帧。解码后的图像数据将存储在 AVFrame 中。
编码帧 如果你需要重新编码帧，可以使用 avcodec_encode_video2() 将解码后的帧重新编码。
保存帧 将编码后的帧保存到文件中。你可以使用 av_interleaved_write_frame() 将帧写入输出文件。
清理资源 最后，别忘了释放所有分配的内存和关闭文件。
以下是使用 C++， FFmpeg 处理 MP4 编解码示例代码：
extern &amp;#34;C&amp;#34; { #include &amp;lt;libavformat/avformat.h&amp;gt; #include &amp;lt;libavcodec/avcodec.</description>
    </item>
    <item>
      <title>The Implement of Qos   2</title>
      <link>http://localhost:1313/posts/media/the-implement-of-qos---2/</link>
      <pubDate>Thu, 16 May 2024 15:28:08 +0800</pubDate>
      <guid>http://localhost:1313/posts/media/the-implement-of-qos---2/</guid>
      <description>使用 Boost.Asio 库实现 QoS（服务质量）策略 在 C++中使用 Boost.Asio 库来控制数据包的发送和接收，并实现 QoS（服务质量）策略，涉及到对 Asio 库的深入理解和应用。 以下是一个基本的指南，帮助你开始使用 Boost.Asio 来控制数据流：
安装 Boost.Asio: 确保你的系统已经安装了 Boost 库和 Boost.Asio 组件。
创建 io_context 对象: io_context 是 Asio 的中心，所有的异步操作都需要通过它来进行。
创建套接字: 使用 tcp::socket 或 udp::socket 来创建一个套接字对象，这将用于网络通信。
连接和监听: 对于客户端，使用 socket.connect()来建立连接。 对于服务器，使用 tcp::acceptor 来监听端口并接受连接。
异步操作: 使用 async_read、async_write、async_connect 等函数来执行异步 I/O 操作。
处理数据: 使用 boost::asio::buffer 来创建缓冲区，这将用于读取或写入数据。
实现 QoS 策略: 根据你的 QoS 需求，你可能需要实现特定的数据包调度策略。 例如，你可以通过控制数据包的发送间隔或优先级来管理网络流量。
错误处理: 使用错误码或异常来处理网络操作中可能出现的错误。
运行 io_context: 调用 io_context.run()来启动事件循环，处理所有排队的异步事件。
下面是一个简单的示例，展示如何使用 Boost.Asio 发送和接收数据：
#include &amp;lt;boost/asio.hpp&amp;gt; #include &amp;lt;iostream&amp;gt; using boost::asio::ip::tcp; int main() { try { boost::asio::io_context io_context; // 创建一个socket tcp::socket socket(io_context); tcp::resolver resolver(io_context); boost::asio::connect(socket, resolver.</description>
    </item>
    <item>
      <title>Type Casts in C&#43;&#43;</title>
      <link>http://localhost:1313/posts/c&#43;&#43;/type-casts-in-c&#43;&#43;/</link>
      <pubDate>Tue, 07 May 2024 10:37:11 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;/type-casts-in-c&#43;&#43;/</guid>
      <description>在 C++ 中，类型转换是一个重要的概念，尤其是在处理不同类型的对象和指针时。以下是四种 C++ 类型转换运算符的适用场景：
static_cast: 用于基本数据类型之间的转换，如将 int 转换为 float。 用于类层次结构中向上转型（从派生类指针转换为基类指针）。 可以调用类型的显式转换构造函数或转换运算符。 示例： int i = 42; float f = static_cast&amp;lt;float&amp;gt;(i); // 将 int 转换为 float reinterpret_cast: 用于指针类型之间的转换，但不改变指针指向的内存内容。 可以将指针转换为足够大的整数类型，反之亦然。 通常用于底层操作，如操作硬件或进行与平台相关的调用。 示例： int* p = new int(42); void* v = reinterpret_cast&amp;lt;void*&amp;gt;(p); // 将 int* 转换为 void* const_cast: 用于添加或移除对象的 const 属性。 只能用于相同类型之间的转换，不能改变类型本身。 通常用于调用那些参数为非 const 的函数，而你有一个 const 对象。 示例： const int* cp = &amp;amp;i; int* p = const_cast&amp;lt;int*&amp;gt;(cp); // 移除 const 属性 dynamic_cast: 主要用于类层次结构中的安全向下转型（从基类指针转换为派生类指针）。 在转换无效时会返回 nullptr，因此比 static_cast 更安全。 需要运行时类型信息（RTTI）支持。 示例： Base* b = new Derived(); Derived* d = dynamic_cast&amp;lt;Derived*&amp;gt;(b); // 安全向下转型 在选择使用哪种类型转换时，应考虑转换的安全性和目的。static_cast 是最常用的转换类型，适用于大多数非多态类型转换。reinterpret_cast 是最不安全的，应谨慎使用。const_cast 通常用于移除 const 属性以便于特定函数的调用。dynamic_cast 在多态类型转换中提供了类型安全检查，但性能开销较大 12345。</description>
    </item>
    <item>
      <title>Smart Pointers in C&#43;&#43;</title>
      <link>http://localhost:1313/posts/c&#43;&#43;/smart-pointers-in-c&#43;&#43;/</link>
      <pubDate>Tue, 07 May 2024 10:12:55 +0800</pubDate>
      <guid>http://localhost:1313/posts/c&#43;&#43;/smart-pointers-in-c&#43;&#43;/</guid>
      <description>Let’s explore some examples of using std::unique_ptr, std::shared_ptr, and std::weak_ptr in C++.
std::unique_ptr: std::unique_ptr is designed for exclusive ownership of a dynamically allocated object. It ensures that there can be at most one unique_ptr pointing to any resource. When the unique_ptr is destroyed, the resource it points to is automatically reclaimed. You cannot make a copy of a unique_ptr, but you can move it using the new move semantics. Example:</description>
    </item>
  </channel>
</rss>
